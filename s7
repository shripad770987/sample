import boto3
import time
import os

def update_service_desired_count(cluster_name, service_name, new_desired_count, region_name):
    try:
        # Create a boto3 client for ECS
        ecs_client = boto3.client('ecs', region_name=region_name)

        # Check if the service exists
        services = ecs_client.describe_services(cluster=cluster_name, services=[service_name])
        if not services['services']:
            print(f"Error: Service '{service_name}' not found in cluster '{cluster_name}'.")
            return

        # Update the desired count for the service
        response = ecs_client.update_service(
            cluster=cluster_name,
            service=service_name,
            desiredCount=new_desired_count
        )
        print(f"Updated service '{service_name}' in cluster '{cluster_name}' to desired count: {new_desired_count}")
        print(f"Update Response: {response}")

        # Wait for the service to stabilize
        waiter = ecs_client.get_waiter('services_stable')
        try:
            print("Waiting for the service to stabilize...")
            waiter.wait(
                cluster=cluster_name,
                services=[service_name],
                WaiterConfig={
                    'Delay': 10,
                    'MaxAttempts': 12  # Wait up to 2 minutes
                }
            )
            print(f"Service '{service_name}' has stabilized.")
        except Exception as e:
            print(f"Error waiting for service to stabilize: {e}")

        # Describe the service to confirm changes
        service_response = ecs_client.describe_services(
            cluster=cluster_name,
            services=[service_name]
        )
        running_count = service_response['services'][0]['runningCount']
        desired_count = service_response['services'][0]['desiredCount']
        print(f"Service '{service_name}' running count: {running_count}")
        print(f"Service '{service_name}' desired count: {desired_count}")

        # Log the most recent service events
        events = service_response['services'][0]['events'][:5]  # Limit to the last 5 events
        print("Recent Service Events:")
        for event in events:
            print(f"- {event['message']}")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    # Read parameters from environment variables (for GitHub Actions)
    cluster_name = os.getenv('CLUSTER_NAME', 'default')
    service_name = os.getenv('SERVICE_NAME', 'ECS_Runner')
    new_desired_count = int(os.getenv('DESIRED_COUNT', 10))  # Default to 10 if not set
    region_name = os.getenv('AWS_REGION', 'us-east-1')

    print(f"Updating ECS service '{service_name}' in cluster '{cluster_name}' to desired count: {new_desired_count}")
    update_service_desired_count(cluster_name, service_name, new_desired_count, region_name)
